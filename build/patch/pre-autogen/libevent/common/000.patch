diff --git a/Makefile.am b/Makefile.am
index 0f741bc..3a3eee0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -91,10 +91,6 @@ VERSION_INFO = 6:2:0
 # is user-visible, and so we can pretty much guarantee that release
 # series won't be binary-compatible.
 
-if INSTALL_LIBEVENT
-dist_bin_SCRIPTS = event_rpcgen.py
-endif
-
 pkgconfigdir=$(libdir)/pkgconfig
 LIBEVENT_PKGCONFIG=libevent.pc libevent_core.pc libevent_extra.pc
 
@@ -130,7 +126,6 @@ endif
 
 if INSTALL_LIBEVENT
 lib_LTLIBRARIES = $(LIBEVENT_LIBS_LA)
-pkgconfig_DATA = $(LIBEVENT_PKGCONFIG)
 else
 noinst_LTLIBRARIES =  $(LIBEVENT_LIBS_LA)
 endif
@@ -143,8 +138,6 @@ CLEANFILES=
 DISTCLEANFILES=
 BUILT_SOURCES =
 include include/include.am
-include sample/include.am
-include test/include.am
 
 if BUILD_WIN32
 
diff --git a/configure.ac b/configure.ac
index 7528d37..24b65dc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -121,10 +121,6 @@ AC_ARG_ENABLE([function-sections],
 AC_ARG_ENABLE([verbose-debug],
 		AS_HELP_STRING([--enable-verbose-debug, verbose debug logging]),
 	[], [enable_verbose_debug=no])
-AC_ARG_ENABLE([clock-gettime],
-     AS_HELP_STRING(--disable-clock-gettime, do not use clock_gettime even if it is available),
-  [], [enable_clock_gettime=yes])
-
 
 AC_PROG_LIBTOOL
 
@@ -141,10 +137,6 @@ dnl Checks for libraries.
 AC_SEARCH_LIBS([inet_ntoa], [nsl])
 AC_SEARCH_LIBS([socket], [socket])
 AC_SEARCH_LIBS([inet_aton], [resolv])
-if test "x$enable_clock_gettime" = "xyes"; then
-  AC_SEARCH_LIBS([clock_gettime], [rt])
-  AC_CHECK_FUNCS([clock_gettime])
-fi
 AC_SEARCH_LIBS([sendfile], [sendfile])
 
 dnl - check if the macro _WIN32 is defined on this compiler.
@@ -342,6 +334,7 @@ AC_CHECK_FUNCS([ \
   accept4 \
   arc4random \
   arc4random_buf \
+  arc4random_addrandom \
   eventfd \
   epoll_create1 \
   fcntl \
diff --git a/evutil_rand.c b/evutil_rand.c
index 046a14b..3aef9cb 100644
--- a/evutil_rand.c
+++ b/evutil_rand.c
@@ -184,6 +184,24 @@ ev_arc4random_buf(void *buf, size_t n)
 	arc4random_buf(buf, n);
 }
 
+/*
+ * The arc4random included in libevent implements arc4random_addrandom().
+ *
+ * OpenBSD libc/crypt/arc4random.c migrated to ChaCha20 since 1.25 and
+ * have removed arc4random_addrandom() since 1.26. Since then, other libcs
+ * followed suit (e.g. Android's own libc). But libevent's arc4random.c
+ * copy still implement arc4random_addrandom().
+ *
+ * See also:
+ *
+ * - https://github.com/measurement-kit/libevent/commit/8b275d967d7ffd95d5cc12069aef35669126c6d9
+ * - https://bugzilla.mozilla.org/show_bug.cgi?id=931354
+ * - https://bug931354.bmoattachments.org/attachment.cgi?id=829728
+ */
+#ifndef EVENT__HAVE_ARC4RANDOM_ADDRANDOM
+#define EVENT__HAVE_ARC4RANDOM_ADDRANDOM 1
+#endif
+
 #endif /* } !EVENT__HAVE_ARC4RANDOM */
 
 void
@@ -195,8 +213,10 @@ evutil_secure_rng_get_bytes(void *buf, size_t n)
 void
 evutil_secure_rng_add_bytes(const char *buf, size_t n)
 {
+#if defined EVENT__HAVE_ARC4RANDOM_ADDRANDOM
 	arc4random_addrandom((unsigned char*)buf,
 	    n>(size_t)INT_MAX ? INT_MAX : (int)n);
+#endif
 }
 
 void
diff --git a/openssl-compat.h b/openssl-compat.h
index 69afc71..8e3556a 100644
--- a/openssl-compat.h
+++ b/openssl-compat.h
@@ -1,7 +1,7 @@
 #ifndef OPENSSL_COMPAT_H
 #define OPENSSL_COMPAT_H
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined LIBRESSL_VERSION_NUMBER
 
 static inline BIO_METHOD *BIO_meth_new(int type, const char *name)
 {
@@ -30,6 +30,6 @@ static inline BIO_METHOD *BIO_meth_new(int type, const char *name)
 
 #define TLS_method SSLv23_method
 
-#endif /* OPENSSL_VERSION_NUMBER < 0x10100000L */
+#endif /* OPENSSL_VERSION_NUMBER < 0x10100000L || defined LIBRESSL_VERSION_NUMBER */
 
 #endif /* OPENSSL_COMPAT_H */
